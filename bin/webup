#!/usr/bin/env python

"""
Usage:
    webup serve
    webup get
    webup put [<data>]
    webup split [<data>]
"""

import json
import sys

import docopt

import vanilla


import logging
logging.basicConfig()


class Controller(object):
    def __init__(self):
        h = vanilla.Hub()
        self.conn = h.tcp.connect(host='localhost', port=10080)

    def __getattr__(self, name):
        def f(*a, **kw):
            self.conn.send(json.dumps((name, a, kw)))
            try:
                return self.conn.recv()
            except vanilla.Closed:
                return None
        return f


def main(argv):
    if argv['put']:
        data = argv['<data>']
        if data is None:
            data = sys.stdin.read()
        Controller().put(data)
        return

    if argv['split']:
        data = argv['<data>']
        if data is None:
            data = sys.stdin.read()
        Controller().split(data)
        return

    if argv['get']:
        print Controller().get()
        return

    if argv['serve']:
        h = vanilla.Hub()

        class API(object):
            def __init__(self):
                self.q = []
                self.commands = h.broadcast()

                self.panels = ['initial']
                self.current = 0

            def put(self, data):
                self.panels[self.current] = data
                data = json.dumps(['put', {'data': data}])
                self.commands.send(data)

            def split(self, data):
                self.panels.append(data)
                self.current += 1
                data = json.dumps(['split', {'data': data}])
                self.commands.send(data)

            def get(self):
                return self.panels[self.current]


        api = API()

        serve = h.tcp.listen(host='localhost', port=10080)

        @serve.consume
        def _(conn):
            data = conn.recv()
            name, a, kw = json.loads(data)
            ret = getattr(api, name)(*a, **kw)
            if ret is not None:
                conn.send(ret)
            conn.close()

        b = h.bean(host='0.0.0.0', port=8080)

        b.static('/', 'serve/index.html')
        b.static('/css', 'serve/css')
        b.static('/js', 'serve/js')
        b.static('/build', 'serve/build')

        @b.websocket('/')
        def _(ws):
            commands = api.commands.subscribe()
            for command in commands:
                ws.send(command)

        print 'listening on on http://0.0.0.0:8080'

        h.stop_on_term()


if __name__ == '__main__':
    argv = docopt.docopt(__doc__)
    sys.exit(main(argv))
